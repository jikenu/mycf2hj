import{_ as n,c as s,o as a,a as t}from"./app-BKdByfKa.js";const p={},e=t(`<p>hel2 代码日志 yonggekkk/Cloudflare-workers-pages-vless</p><h1 id="hel2-code" tabindex="-1"><a class="header-anchor" href="#hel2-code"><span>hel2 code</span></a></h1><p><strong>from yonggekkk/Cloudflare-workers-pages-vless</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">//注： yonggekkk/Cloudflare-workers-pages-vless 的脚本 2024.05.02日更新  解决10011  需要删除worker重新创建</span></span>
<span class="line"><span class="token comment">//注： https://hel2.2961819202.workers.dev/9afa0f97-643e-4c22-8156-dfa49bfcd88b</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// &lt;!--GAMFC--&gt;version base on commit 43fad05dcdae3b723c53c226f8181fc5bd47223e, time is 2023-06-22 15:20:02 UTC&lt;!--GAMFC-END--&gt;.</span></span>
<span class="line"><span class="token comment">// @ts-ignore</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cloudflare:sockets&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// How to generate your own UUID:</span></span>
<span class="line"><span class="token comment">// [Windows] Press &quot;Win + R&quot;, input cmd and run:  Powershell -NoExit -Command &quot;[guid]::NewGuid()&quot;</span></span>
<span class="line"><span class="token keyword">let</span> userID <span class="token operator">=</span> <span class="token string">&#39;9afa0f97-643e-4c22-8156-dfa49bfcd88b&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> proxyIPs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;workers.cloudflare.cyou&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> proxyIP <span class="token operator">=</span> proxyIPs<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> proxyIPs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidUUID</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;uuid is not valid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Request<span class="token punctuation">}</span></span> <span class="token parameter">request</span></span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span>UUID<span class="token operator">:</span> string<span class="token punctuation">,</span> PROXYIP<span class="token operator">:</span> string<span class="token punctuation">,</span> DNS_RESOLVER_URL<span class="token operator">:</span> string<span class="token punctuation">,</span> NODE_ID<span class="token operator">:</span> int<span class="token punctuation">,</span> API_HOST<span class="token operator">:</span> string<span class="token punctuation">,</span> API_TOKEN<span class="token operator">:</span> string<span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token parameter">env</span></span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ExecutionContext<span class="token punctuation">}</span></span> <span class="token parameter">ctx</span></span>
<span class="line">	 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span>Response<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span></span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token keyword">async</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> env<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">			userID <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token constant">UUID</span> <span class="token operator">||</span> userID<span class="token punctuation">;</span></span>
<span class="line">			proxyIP <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token constant">PROXYIP</span> <span class="token operator">||</span> proxyIP<span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">const</span> upgradeHeader <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Upgrade&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>upgradeHeader <span class="token operator">||</span> upgradeHeader <span class="token operator">!==</span> <span class="token string">&#39;websocket&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">switch</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">case</span> <span class="token string">&#39;/cf&#39;</span><span class="token operator">:</span></span>
<span class="line">						<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cf<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">							<span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">							<span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">								<span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json;charset=utf-8&quot;</span><span class="token punctuation">,</span></span>
<span class="line">							<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">						<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					</span>
<span class="line">					<span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">						<span class="token keyword">const</span> vlessConfig <span class="token operator">=</span> <span class="token function">getVLESSConfig</span><span class="token punctuation">(</span>userID<span class="token punctuation">,</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Host&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>vlessConfig<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">							<span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">							<span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">								<span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/plain;charset=utf-8&quot;</span><span class="token punctuation">,</span></span>
<span class="line">							<span class="token punctuation">}</span></span>
<span class="line">						<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					<span class="token punctuation">}</span></span>
<span class="line">					<span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">						<span class="token comment">// return new Response(&#39;Not found&#39;, { status: 404 });</span></span>
<span class="line">						<span class="token comment">// For any other path, reverse proxy to &#39;ramdom website&#39; and return the original response, caching it in the process</span></span>
<span class="line">						<span class="token keyword">const</span> randomHostname <span class="token operator">=</span> cn_hostnames<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> cn_hostnames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">						<span class="token keyword">const</span> newHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						newHeaders<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;cf-connecting-ip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.2.3.4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						newHeaders<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;x-forwarded-for&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.2.3.4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						newHeaders<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;x-real-ip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.2.3.4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						newHeaders<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;referer&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://www.google.com/search?q=edtunnel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						<span class="token comment">// Use fetch to proxy the request to 15 different domains</span></span>
<span class="line">						<span class="token keyword">const</span> proxyUrl <span class="token operator">=</span> <span class="token string">&#39;https://&#39;</span> <span class="token operator">+</span> randomHostname <span class="token operator">+</span> url<span class="token punctuation">.</span>pathname <span class="token operator">+</span> url<span class="token punctuation">.</span>search<span class="token punctuation">;</span></span>
<span class="line">						<span class="token keyword">let</span> modifiedRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>proxyUrl<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">							<span class="token literal-property property">method</span><span class="token operator">:</span> request<span class="token punctuation">.</span>method<span class="token punctuation">,</span></span>
<span class="line">							<span class="token literal-property property">headers</span><span class="token operator">:</span> newHeaders<span class="token punctuation">,</span></span>
<span class="line">							<span class="token literal-property property">body</span><span class="token operator">:</span> request<span class="token punctuation">.</span>body<span class="token punctuation">,</span></span>
<span class="line">							<span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;manual&#39;</span><span class="token punctuation">,</span></span>
<span class="line">						<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						<span class="token keyword">const</span> proxyResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>modifiedRequest<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;manual&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						<span class="token comment">// Check for 302 or 301 redirect status and return an error response</span></span>
<span class="line">						<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>proxyResponse<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">							<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Redirects to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>randomHostname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> are not allowed.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">								<span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">403</span><span class="token punctuation">,</span></span>
<span class="line">								<span class="token literal-property property">statusText</span><span class="token operator">:</span> <span class="token string">&#39;Forbidden&#39;</span><span class="token punctuation">,</span></span>
<span class="line">							<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						<span class="token punctuation">}</span></span>
<span class="line">						<span class="token comment">// Return the response from the proxy server</span></span>
<span class="line">						<span class="token keyword">return</span> proxyResponse<span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">vlessOverWSHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Error<span class="token punctuation">}</span></span> */</span> <span class="token keyword">let</span> e <span class="token operator">=</span> err<span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Request<span class="token punctuation">}</span></span> <span class="token parameter">request</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">vlessOverWSHandler</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WebSocket<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> */</span></span>
<span class="line">	<span class="token comment">// @ts-ignore</span></span>
<span class="line">	<span class="token keyword">const</span> webSocketPair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> <span class="token punctuation">[</span>client<span class="token punctuation">,</span> webSocket<span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>webSocketPair<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	webSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> portWithRandomLog <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> */</span> info<span class="token punctuation">,</span> <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">}</span></span> */</span> event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>portWithRandomLog<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>info<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> event <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> earlyDataHeader <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;sec-websocket-protocol&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">const</span> readableWebSocketStream <span class="token operator">=</span> <span class="token function">makeReadableWebSocketStream</span><span class="token punctuation">(</span>webSocket<span class="token punctuation">,</span> earlyDataHeader<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Socket <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>*/</span></span>
<span class="line">	<span class="token keyword">let</span> remoteSocketWapper <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> udpStreamWrite <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> isDns <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// ws --&gt; remote</span></span>
<span class="line">	readableWebSocketStream<span class="token punctuation">.</span><span class="token function">pipeTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WritableStream</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">async</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">chunk<span class="token punctuation">,</span> controller</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>isDns <span class="token operator">&amp;&amp;</span> udpStreamWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">return</span> <span class="token function">udpStreamWrite</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>remoteSocketWapper<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">const</span> writer <span class="token operator">=</span> remoteSocketWapper<span class="token punctuation">.</span>value<span class="token punctuation">.</span>writable<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">				<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				writer<span class="token punctuation">.</span><span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">			<span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">				hasError<span class="token punctuation">,</span></span>
<span class="line">				message<span class="token punctuation">,</span></span>
<span class="line">				portRemote <span class="token operator">=</span> <span class="token number">443</span><span class="token punctuation">,</span></span>
<span class="line">				addressRemote <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">				rawDataIndex<span class="token punctuation">,</span></span>
<span class="line">				vlessVersion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">				isUDP<span class="token punctuation">,</span></span>
<span class="line">			<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">processVlessHeader</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> userID<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			address <span class="token operator">=</span> addressRemote<span class="token punctuation">;</span></span>
<span class="line">			portWithRandomLog <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>portRemote<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>isUDP <span class="token operator">?</span> <span class="token string">&#39;udp &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;tcp &#39;</span></span>
<span class="line">				<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token comment">// controller.error(message);</span></span>
<span class="line">				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cf seems has bug, controller.error will not end stream</span></span>
<span class="line">				<span class="token comment">// webSocket.close(1000, message);</span></span>
<span class="line">				<span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token comment">// if UDP but port not DNS port, close it</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>isUDP<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token punctuation">(</span>portRemote <span class="token operator">===</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					isDns <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token comment">// controller.error(&#39;UDP proxy only enable for DNS which is port 53&#39;);</span></span>
<span class="line">					<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;UDP proxy only enable for DNS which is port 53&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cf seems has bug, controller.error will not end stream</span></span>
<span class="line">					<span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token comment">// [&quot;version&quot;, &quot;附加信息长度 N&quot;]</span></span>
<span class="line">			<span class="token keyword">const</span> vlessResponseHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span>vlessVersion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">const</span> rawClientData <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>rawDataIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">			<span class="token comment">// TODO: support udp here when cf runtime has udp support</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>isDns<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">const</span> <span class="token punctuation">{</span> write <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">handleUDPOutBound</span><span class="token punctuation">(</span>webSocket<span class="token punctuation">,</span> vlessResponseHeader<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				udpStreamWrite <span class="token operator">=</span> write<span class="token punctuation">;</span></span>
<span class="line">				<span class="token function">udpStreamWrite</span><span class="token punctuation">(</span>rawClientData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token function">handleTCPOutBound</span><span class="token punctuation">(</span>remoteSocketWapper<span class="token punctuation">,</span> addressRemote<span class="token punctuation">,</span> portRemote<span class="token punctuation">,</span> rawClientData<span class="token punctuation">,</span> webSocket<span class="token punctuation">,</span> vlessResponseHeader<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">readableWebSocketStream is close</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token function">abort</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">readableWebSocketStream is abort</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;readableWebSocketStream pipeTo error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token comment">// @ts-ignore</span></span>
<span class="line">		<span class="token literal-property property">webSocket</span><span class="token operator">:</span> client<span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Checks if a given UUID is present in the API response.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">targetUuid</span> The UUID to search for.</span>
<span class="line"> * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span>boolean<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> A Promise that resolves to true if the UUID is present in the API response, false otherwise.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">checkUuidInApiResponse</span><span class="token punctuation">(</span><span class="token parameter">targetUuid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Check if any of the environment variables are empty</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">const</span> apiResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getApiResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>apiResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">const</span> isUuidInResponse <span class="token operator">=</span> apiResponse<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>uuid <span class="token operator">===</span> targetUuid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> isUuidInResponse<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Handles outbound TCP connections.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>any<span class="token punctuation">}</span></span> <span class="token parameter">remoteSocket</span> </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">addressRemote</span> The remote address to connect to.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">portRemote</span> The remote port to connect to.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Uint8Array<span class="token punctuation">}</span></span> <span class="token parameter">rawClientData</span> The raw client data to write.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WebSocket<span class="token punctuation">}</span></span> <span class="token parameter">webSocket</span> The WebSocket to pass the remote socket to.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Uint8Array<span class="token punctuation">}</span></span> <span class="token parameter">vlessResponseHeader</span> The VLESS response header.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">log</span> The logging function.</span>
<span class="line"> * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> The remote socket.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleTCPOutBound</span><span class="token punctuation">(</span><span class="token parameter">remoteSocket<span class="token punctuation">,</span> addressRemote<span class="token punctuation">,</span> portRemote<span class="token punctuation">,</span> rawClientData<span class="token punctuation">,</span> webSocket<span class="token punctuation">,</span> vlessResponseHeader<span class="token punctuation">,</span> log<span class="token punctuation">,</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectAndWrite</span><span class="token punctuation">(</span><span class="token parameter">address<span class="token punctuation">,</span> port</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Socket<span class="token punctuation">}</span></span> */</span></span>
<span class="line">		<span class="token keyword">const</span> tcpSocket <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">			<span class="token literal-property property">hostname</span><span class="token operator">:</span> address<span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">port</span><span class="token operator">:</span> port<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		remoteSocket<span class="token punctuation">.</span>value <span class="token operator">=</span> tcpSocket<span class="token punctuation">;</span></span>
<span class="line">		<span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">connected to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">const</span> writer <span class="token operator">=</span> tcpSocket<span class="token punctuation">.</span>writable<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>rawClientData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// first write, nomal is tls client hello</span></span>
<span class="line">		writer<span class="token punctuation">.</span><span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> tcpSocket<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// if the cf connect tcp socket have no incoming data, we retry to redirect ip</span></span>
<span class="line">	<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">const</span> tcpSocket <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">connectAndWrite</span><span class="token punctuation">(</span>proxyIP <span class="token operator">||</span> addressRemote<span class="token punctuation">,</span> portRemote<span class="token punctuation">)</span></span>
<span class="line">		<span class="token comment">// no matter retry success or not, close websocket</span></span>
<span class="line">		tcpSocket<span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;retry tcpSocket closed error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token function">safeCloseWebSocket</span><span class="token punctuation">(</span>webSocket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token function">remoteSocketToWS</span><span class="token punctuation">(</span>tcpSocket<span class="token punctuation">,</span> webSocket<span class="token punctuation">,</span> vlessResponseHeader<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">const</span> tcpSocket <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">connectAndWrite</span><span class="token punctuation">(</span>addressRemote<span class="token punctuation">,</span> portRemote<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// when remoteSocket is ready, pass to websocket</span></span>
<span class="line">	<span class="token comment">// remote--&gt; ws</span></span>
<span class="line">	<span class="token function">remoteSocketToWS</span><span class="token punctuation">(</span>tcpSocket<span class="token punctuation">,</span> webSocket<span class="token punctuation">,</span> vlessResponseHeader<span class="token punctuation">,</span> retry<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WebSocket<span class="token punctuation">}</span></span> <span class="token parameter">webSocketServer</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">earlyDataHeader</span> for ws 0rtt</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>info<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">}</span></span> <span class="token parameter">log</span> for ws 0rtt</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">makeReadableWebSocketStream</span><span class="token punctuation">(</span><span class="token parameter">webSocketServer<span class="token punctuation">,</span> earlyDataHeader<span class="token punctuation">,</span> log</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">let</span> readableStreamCancel <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadableStream</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter">controller</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			webSocketServer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token punctuation">(</span>readableStreamCancel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">				<span class="token keyword">const</span> message <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">				controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">			<span class="token comment">// The event means that the client closed the client -&gt; server stream.</span></span>
<span class="line">			<span class="token comment">// However, the server -&gt; client stream is still open until you call close() on the server side.</span></span>
<span class="line">			<span class="token comment">// The WebSocket protocol says that a separate close message must be sent in each direction to fully close the socket.</span></span>
<span class="line">			webSocketServer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token comment">// client send close, need close server</span></span>
<span class="line">				<span class="token comment">// if stream is cancel, skip controller.close</span></span>
<span class="line">				<span class="token function">safeCloseWebSocket</span><span class="token punctuation">(</span>webSocketServer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token punctuation">(</span>readableStreamCancel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">				controller<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			webSocketServer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;webSocketServer has error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				controller<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// for ws 0rtt</span></span>
<span class="line">			<span class="token keyword">const</span> <span class="token punctuation">{</span> earlyData<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">base64ToArrayBuffer</span><span class="token punctuation">(</span>earlyDataHeader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				controller<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>earlyData<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>earlyData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">		<span class="token function">pull</span><span class="token punctuation">(</span><span class="token parameter">controller</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">// if ws can stop read if stream is full, we can implement backpressure</span></span>
<span class="line">			<span class="token comment">// https://streams.spec.whatwg.org/#example-rs-push-backpressure</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">// 1. pipe WritableStream has error, this cancel will called, so ws handle server close into here</span></span>
<span class="line">			<span class="token comment">// 2. if readableStream is cancel, all controller.close/enqueue need skip,</span></span>
<span class="line">			<span class="token comment">// 3. but from testing controller.error still work even if readableStream is cancel</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>readableStreamCancel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ReadableStream was canceled, due to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">			readableStreamCancel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token function">safeCloseWebSocket</span><span class="token punctuation">(</span>webSocketServer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> stream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// https://xtls.github.io/development/protocols/vless.html</span></span>
<span class="line"><span class="token comment">// https://github.com/zizifn/excalidraw-backup/blob/main/v2ray-protocol.excalidraw</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span> ArrayBuffer<span class="token punctuation">}</span></span> <span class="token parameter">vlessBuffer</span> </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">userID</span> </span>
<span class="line"> * <span class="token keyword">@returns</span> </span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processVlessHeader</span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token parameter">vlessBuffer<span class="token punctuation">,</span></span>
<span class="line">	userID</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>vlessBuffer<span class="token punctuation">.</span>byteLength <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;invalid data&#39;</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">const</span> version <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> isValidUser <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> isUDP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> slicedBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> slicedBufferString <span class="token operator">=</span> <span class="token function">stringify</span><span class="token punctuation">(</span>slicedBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">const</span> uuids <span class="token operator">=</span> userID<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> userID<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span>userID<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">const</span> checkUuidInApi <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">checkUuidInApiResponse</span><span class="token punctuation">(</span>slicedBufferString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	isValidUser <span class="token operator">=</span> uuids<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">userUuid</span> <span class="token operator">=&gt;</span> checkUuidInApi <span class="token operator">||</span> slicedBufferString <span class="token operator">===</span> userUuid<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">checkUuidInApi: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">await</span> <span class="token function">checkUuidInApiResponse</span><span class="token punctuation">(</span>slicedBufferString<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, userID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>slicedBufferString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValidUser<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;invalid user&#39;</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">const</span> optLength <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//skip opt for now</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span></span>
<span class="line">		vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">+</span> optLength<span class="token punctuation">,</span> <span class="token number">18</span> <span class="token operator">+</span> optLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 0x01 TCP</span></span>
<span class="line">	<span class="token comment">// 0x02 UDP</span></span>
<span class="line">	<span class="token comment">// 0x03 MUX</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		isUDP <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">command </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not support, command 01-tcp,02-udp,03-mux</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">const</span> portIndex <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">+</span> optLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> portBuffer <span class="token operator">=</span> vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>portIndex<span class="token punctuation">,</span> portIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">// port is big-Endian in raw data etc 80 == 0x005d</span></span>
<span class="line">	<span class="token keyword">const</span> portRemote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>portBuffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUint16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">let</span> addressIndex <span class="token operator">=</span> portIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> addressBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span></span>
<span class="line">		vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>addressIndex<span class="token punctuation">,</span> addressIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 1--&gt; ipv4  addressLength =4</span></span>
<span class="line">	<span class="token comment">// 2--&gt; domain name addressLength=addressBuffer[1]</span></span>
<span class="line">	<span class="token comment">// 3--&gt; ipv6  addressLength =16</span></span>
<span class="line">	<span class="token keyword">const</span> addressType <span class="token operator">=</span> addressBuffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> addressLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> addressValueIndex <span class="token operator">=</span> addressIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> addressValue <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">switch</span> <span class="token punctuation">(</span>addressType<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">			addressLength <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">			addressValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span></span>
<span class="line">				vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>addressValueIndex<span class="token punctuation">,</span> addressValueIndex <span class="token operator">+</span> addressLength<span class="token punctuation">)</span></span>
<span class="line">			<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">			addressLength <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span></span>
<span class="line">				vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>addressValueIndex<span class="token punctuation">,</span> addressValueIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">			<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">			addressValueIndex <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">			addressValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span></span>
<span class="line">				vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>addressValueIndex<span class="token punctuation">,</span> addressValueIndex <span class="token operator">+</span> addressLength<span class="token punctuation">)</span></span>
<span class="line">			<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">			addressLength <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">const</span> dataView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span></span>
<span class="line">				vlessBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>addressValueIndex<span class="token punctuation">,</span> addressValueIndex <span class="token operator">+</span> addressLength<span class="token punctuation">)</span></span>
<span class="line">			<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// 2001:0db8:85a3:0000:0000:8a2e:0370:7334</span></span>
<span class="line">			<span class="token keyword">const</span> ipv6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				ipv6<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dataView<span class="token punctuation">.</span><span class="token function">getUint16</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			addressValue <span class="token operator">=</span> ipv6<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// seems no need add [] for ipv6</span></span>
<span class="line">			<span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">				<span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">invild  addressType is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>addressType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>addressValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">addressValue is empty, addressType is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>addressType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token literal-property property">addressRemote</span><span class="token operator">:</span> addressValue<span class="token punctuation">,</span></span>
<span class="line">		addressType<span class="token punctuation">,</span></span>
<span class="line">		portRemote<span class="token punctuation">,</span></span>
<span class="line">		<span class="token literal-property property">rawDataIndex</span><span class="token operator">:</span> addressValueIndex <span class="token operator">+</span> addressLength<span class="token punctuation">,</span></span>
<span class="line">		<span class="token literal-property property">vlessVersion</span><span class="token operator">:</span> version<span class="token punctuation">,</span></span>
<span class="line">		isUDP<span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Socket<span class="token punctuation">}</span></span> <span class="token parameter">remoteSocket</span> </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WebSocket<span class="token punctuation">}</span></span> <span class="token parameter">webSocket</span> </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ArrayBuffer<span class="token punctuation">}</span></span> <span class="token parameter">vlessResponseHeader</span> </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span></span> <span class="token parameter">retry</span></span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">log</span> </span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">remoteSocketToWS</span><span class="token punctuation">(</span><span class="token parameter">remoteSocket<span class="token punctuation">,</span> webSocket<span class="token punctuation">,</span> vlessResponseHeader<span class="token punctuation">,</span> retry<span class="token punctuation">,</span> log</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// remote--&gt; ws</span></span>
<span class="line">	<span class="token keyword">let</span> remoteChunkCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>ArrayBuffer <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span></span> */</span></span>
<span class="line">	<span class="token keyword">let</span> vlessHeader <span class="token operator">=</span> vlessResponseHeader<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">let</span> hasIncomingData <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// check if remoteSocket has incoming data</span></span>
<span class="line">	<span class="token keyword">await</span> remoteSocket<span class="token punctuation">.</span>readable</span>
<span class="line">		<span class="token punctuation">.</span><span class="token function">pipeTo</span><span class="token punctuation">(</span></span>
<span class="line">			<span class="token keyword">new</span> <span class="token class-name">WritableStream</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">				<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">				<span class="token doc-comment comment">/**</span>
<span class="line">				 * </span>
<span class="line">				 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Uint8Array<span class="token punctuation">}</span></span> <span class="token parameter">chunk</span> </span>
<span class="line">				 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">controller</span> </span>
<span class="line">				 */</span></span>
<span class="line">				<span class="token keyword">async</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">chunk<span class="token punctuation">,</span> controller</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					hasIncomingData <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">					<span class="token comment">// remoteChunkCount++;</span></span>
<span class="line">					<span class="token keyword">if</span> <span class="token punctuation">(</span>webSocket<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token constant">WS_READY_STATE_OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">						controller<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span></span>
<span class="line">							<span class="token string">&#39;webSocket.readyState is not open, maybe close&#39;</span></span>
<span class="line">						<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					<span class="token punctuation">}</span></span>
<span class="line">					<span class="token keyword">if</span> <span class="token punctuation">(</span>vlessHeader<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">						webSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>vlessHeader<span class="token punctuation">,</span> chunk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">						vlessHeader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">					<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">						<span class="token comment">// seems no need rate limit this, CF seems fix this??..</span></span>
<span class="line">						<span class="token comment">// if (remoteChunkCount &gt; 20000) {</span></span>
<span class="line">						<span class="token comment">// 	// cf one package is 4096 byte(4kb),  4096 * 20000 = 80M</span></span>
<span class="line">						<span class="token comment">// 	await delay(1);</span></span>
<span class="line">						<span class="token comment">// }</span></span>
<span class="line">						webSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					<span class="token punctuation">}</span></span>
<span class="line">				<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">				<span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">remoteConnection!.readable is close with hasIncomingData is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hasIncomingData<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					<span class="token comment">// safeCloseWebSocket(webSocket); // no need server close websocket frist for some case will casue HTTP ERR_CONTENT_LENGTH_MISMATCH issue, client will send close event anyway.</span></span>
<span class="line">				<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">				<span class="token function">abort</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">remoteConnection!.readable abort</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">			console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span></span>
<span class="line">				<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">remoteSocketToWS has exception </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">				error<span class="token punctuation">.</span>stack <span class="token operator">||</span> error</span>
<span class="line">			<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token function">safeCloseWebSocket</span><span class="token punctuation">(</span>webSocket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// seems is cf connect socket have error,</span></span>
<span class="line">	<span class="token comment">// 1. Socket.closed will have error</span></span>
<span class="line">	<span class="token comment">// 2. Socket.readable will be close without any data coming</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>hasIncomingData <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">retry</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token function">retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">base64Str</span> </span>
<span class="line"> * <span class="token keyword">@returns</span> </span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">base64ToArrayBuffer</span><span class="token punctuation">(</span><span class="token parameter">base64Str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base64Str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// go use modified Base64 for URL rfc4648 which js atob not support</span></span>
<span class="line">		base64Str <span class="token operator">=</span> base64Str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">_</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">const</span> decode <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>base64Str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">const</span> arryBuffer <span class="token operator">=</span> Uint8Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>decode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">earlyData</span><span class="token operator">:</span> arryBuffer<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * This is not real UUID validation</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">uuid</span> </span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isValidUUID</span><span class="token punctuation">(</span><span class="token parameter">uuid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">const</span> uuidRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> uuidRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">WS_READY_STATE_OPEN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">WS_READY_STATE_CLOSING</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Normally, WebSocket will not has exceptions when close.</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WebSocket<span class="token punctuation">}</span></span> <span class="token parameter">socket</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">safeCloseWebSocket</span><span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token constant">WS_READY_STATE_OPEN</span> <span class="token operator">||</span> socket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token constant">WS_READY_STATE_CLOSING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;safeCloseWebSocket error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> byteToHex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	byteToHex<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">unsafeStringify</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> offset <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token punctuation">(</span>byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> byteToHex<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">stringify</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> offset <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">const</span> uuid <span class="token operator">=</span> <span class="token function">unsafeStringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidUUID</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">throw</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Stringified UUID is invalid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> uuid<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WebSocket<span class="token punctuation">}</span></span> <span class="token parameter">webSocket</span> </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ArrayBuffer<span class="token punctuation">}</span></span> <span class="token parameter">vlessResponseHeader</span> </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">}</span></span> <span class="token parameter">log</span> </span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleUDPOutBound</span><span class="token punctuation">(</span><span class="token parameter">webSocket<span class="token punctuation">,</span> vlessResponseHeader<span class="token punctuation">,</span> log</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">let</span> isVlessHeaderSent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> transformStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformStream</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter">controller</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">chunk<span class="token punctuation">,</span> controller</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">// udp message 2 byte is the the length of udp data</span></span>
<span class="line">			<span class="token comment">// TODO: this should have bug, beacsue maybe udp chunk can be in two websocket message</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> chunk<span class="token punctuation">.</span>byteLength<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">const</span> lengthBuffer <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">const</span> udpPakcetLength <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>lengthBuffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUint16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">const</span> udpData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span></span>
<span class="line">					chunk<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> udpPakcetLength<span class="token punctuation">)</span></span>
<span class="line">				<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> udpPakcetLength<span class="token punctuation">;</span></span>
<span class="line">				controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>udpData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token function">flush</span><span class="token punctuation">(</span><span class="token parameter">controller</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// only handle dns udp for now</span></span>
<span class="line">	transformStream<span class="token punctuation">.</span>readable<span class="token punctuation">.</span><span class="token function">pipeTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WritableStream</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">async</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>dohURL<span class="token punctuation">,</span> <span class="token comment">// dns server url</span></span>
<span class="line">				<span class="token punctuation">{</span></span>
<span class="line">					<span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">					<span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">						<span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/dns-message&#39;</span><span class="token punctuation">,</span></span>
<span class="line">					<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">					<span class="token literal-property property">body</span><span class="token operator">:</span> chunk<span class="token punctuation">,</span></span>
<span class="line">				<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">const</span> dnsQueryResult <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">const</span> udpSize <span class="token operator">=</span> dnsQueryResult<span class="token punctuation">.</span>byteLength<span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// console.log([...new Uint8Array(dnsQueryResult)].map((x) =&gt; x.toString(16)));</span></span>
<span class="line">			<span class="token keyword">const</span> udpSizeBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>udpSize <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> udpSize <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>webSocket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token constant">WS_READY_STATE_OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">doh success and dns message length is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>udpSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token punctuation">(</span>isVlessHeaderSent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					webSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>udpSizeBuffer<span class="token punctuation">,</span> dnsQueryResult<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">					webSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>vlessResponseHeader<span class="token punctuation">,</span> udpSizeBuffer<span class="token punctuation">,</span> dnsQueryResult<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					isVlessHeaderSent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dns udp has error&#39;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">const</span> writer <span class="token operator">=</span> transformStream<span class="token punctuation">.</span>writable<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token doc-comment comment">/**</span>
<span class="line">		 * </span>
<span class="line">		 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Uint8Array<span class="token punctuation">}</span></span> <span class="token parameter">chunk</span> </span>
<span class="line">		 */</span></span>
<span class="line">		<span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">userID</span> </span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span></span> <span class="token parameter">hostName</span></span>
<span class="line"> * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getVLESSConfig</span><span class="token punctuation">(</span><span class="token parameter">userID<span class="token punctuation">,</span> hostName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">const</span> wvlessws <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vless://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\u0040www.visa.com.sg:8880?encryption=none&amp;security=none&amp;type=ws&amp;host=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;path=%2F%3Fed%3D2048#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">const</span> pvlesswstls <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vless://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\u0040www.visa.com.sg:8443?encryption=none&amp;security=tls&amp;type=ws&amp;host=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;sni=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;fp=random&amp;path=%2F%3Fed%3D2048#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>hostName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;pages.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">==========================配置详解==============================</span>
<span class="line"></span>
<span class="line">################################################################</span>
<span class="line">CF-pages-vless+ws+tls节点，分享链接如下：</span>
<span class="line"></span>
<span class="line"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pvlesswstls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line"></span>
<span class="line">---------------------------------------------------------------</span>
<span class="line">注意：如果 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 在本地网络打不开（中国移动用户注意）</span>
<span class="line">       客户端选项的伪装域名(host)必须改为你在CF解析完成的自定义域名</span>
<span class="line">---------------------------------------------------------------</span>
<span class="line">客户端必要文明参数如下：</span>
<span class="line">客户端地址(address)：自定义的域名 或者 优选域名 或者 优选IP（反代IP必须与反代端口对应）</span>
<span class="line">端口(port)：6个https端口可任意选择(443、8443、2053、2083、2087、2096)</span>
<span class="line">用户ID(uuid)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">传输协议(network)：ws 或者 websocket</span>
<span class="line">伪装域名(host)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">路径(path)：/?ed=2048</span>
<span class="line">传输安全(TLS)：开启</span>
<span class="line">跳过证书验证(allowlnsecure)：false</span>
<span class="line">################################################################</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hostName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;workers.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">==========================配置详解==============================</span>
<span class="line"></span>
<span class="line">################################################################</span>
<span class="line">一、CF-workers-vless+ws节点，分享链接如下：</span>
<span class="line"></span>
<span class="line"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wvlessws<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line"></span>
<span class="line">---------------------------------------------------------------</span>
<span class="line">注意：当前节点无需使用CF解析完成的域名，客户端选项的TLS选项必须关闭</span>
<span class="line">---------------------------------------------------------------</span>
<span class="line">客户端必要文明参数如下：</span>
<span class="line">客户端地址(address)：自定义的域名 或者 优选域名 或者 优选IP（反代IP必须与反代端口对应）</span>
<span class="line">端口(port)：7个http端口可任意选择(80、8080、8880、2052、2082、2086、2095)</span>
<span class="line">用户ID(uuid)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">传输协议(network)：ws 或者 websocket</span>
<span class="line">伪装域名(host)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">路径(path)：/?ed=2048</span>
<span class="line">################################################################</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">################################################################</span>
<span class="line"></span>
<span class="line">查看CF-workers-vless+ws+tls节点配置信息，请在浏览器地址栏输入：你设置的自定义域名/你设置的UUID</span>
<span class="line">防止小白过多的操作失误，必须设置自定义域名后才能使用Workers方式的TLS模式，否则，建议只使用vless+ws节点即可</span>
<span class="line">提示：使用pages方式部署，联通、电信用户大概率可以直接使用TLS模式，无需设置自定义域名</span>
<span class="line">pages方式部署可参考此视频教程：https://youtu.be/McdRoLZeTqg</span>
<span class="line"></span>
<span class="line">################################################################</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">==========================配置详解==============================</span>
<span class="line"></span>
<span class="line">=====使用自定义域名查看配置，请确认使用的是workers还是pages=====</span>
<span class="line"></span>
<span class="line">################################################################</span>
<span class="line">一、CF-workers-vless+ws节点，分享链接如下：</span>
<span class="line"></span>
<span class="line"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wvlessws<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line"></span>
<span class="line">---------------------------------------------------------------</span>
<span class="line">注意：当前节点无需使用CF解析完成的域名，客户端选项的TLS选项必须关闭</span>
<span class="line">---------------------------------------------------------------</span>
<span class="line">客户端必要文明参数如下：</span>
<span class="line">客户端地址(address)：自定义的域名 或者 优选域名 或者 优选IP（反代IP必须与反代端口对应）</span>
<span class="line">端口(port)：7个http端口可任意选择(80、8080、8880、2052、2082、2086、2095)</span>
<span class="line">用户ID(uuid)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">传输协议(network)：ws 或者 websocket</span>
<span class="line">伪装域名(host)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">路径(path)：/?ed=2048</span>
<span class="line">################################################################</span>
<span class="line"></span>
<span class="line">################################################################</span>
<span class="line">二、CF-workers-vless+ws+tls 或者 CF-pages-vless+ws+tls节点，分享链接如下：</span>
<span class="line"></span>
<span class="line"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pvlesswstls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line"></span>
<span class="line">---------------------------------------------------------------</span>
<span class="line">注意：客户端选项的伪装域名(host)必须改为你在CF解析完成的自定义域名</span>
<span class="line">---------------------------------------------------------------</span>
<span class="line">客户端必要文明参数如下：</span>
<span class="line">客户端地址(address)：自定义的域名 或者 优选域名 或者 优选IP（反代IP必须与反代端口对应）</span>
<span class="line">端口(port)：6个https端口可任意选择(443、8443、2053、2083、2087、2096)</span>
<span class="line">用户ID(uuid)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">传输协议(network)：ws 或者 websocket</span>
<span class="line">伪装域名(host)：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">路径(path)：/?ed=2048</span>
<span class="line">传输安全(TLS)：开启</span>
<span class="line">跳过证书验证(allowlnsecure)：false</span>
<span class="line">################################################################</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> cn_hostnames <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line"><span class="token string">&#39;&#39;</span> </span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","hel2.html.vue"]]),k=JSON.parse('{"path":"/article/cloudflare/workers/hel2.html","title":"hel2  code","lang":"zh-CN","frontmatter":{"date":"2022-12-18T00:00:00.000Z","category":["VPN"],"tag":["Cloudflare","Workers"]},"headers":[],"git":{"createdTime":1717494283000,"updatedTime":1717494283000,"contributors":[{"name":"jikenu","email":"2961819202@qq.com","commits":1}]},"readingTime":{"minutes":10.12,"words":3035},"filePathRelative":"article/cloudflare/workers/hel2.md","localizedDate":"2022年12月18日","excerpt":"<p>hel2 代码日志 yonggekkk/Cloudflare-workers-pages-vless</p>\\n"}');export{r as comp,k as data};
